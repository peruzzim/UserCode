// eta binning -------------------------------------------------------------------------------
//
const Double_t etaCrackMin = 1.44;
const Double_t etaCrackMax = 1.56;

//STD
const Int_t    nBinsEta              = 14;
Double_t       leftEta  [nBinsEta]   = { 0.02, 0.25, 0.46, 0.81, 0.91, 1.01, 1.16,           etaCrackMax,  1.653,  1.8, 2.0, 2.2, 2.3, 2.4 }; 
Double_t       rightEta [nBinsEta]   = { 0.25, 0.42, 0.77, 0.91, 1.01, 1.13, etaCrackMin,    1.653,        1.8  ,  2.0, 2.2, 2.3, 2.4, 2.5 }; 
const Double_t etabins  [nBinsEta*2] = { 0.02, 0.25,           // 0
  					 0.25, 0.42,           // 1
  					 0.46, 0.77,           // 2
  					 0.81, 0.91,           // 3
  					 0.91, 1.01,           // 4
  					 1.01, 1.13,           // 5
  					 1.16, etaCrackMin,    // 6
  					 etaCrackMax, 1.653,   // 7
  					 1.653, 1.8,           // 8
  					 1.8,  2.0,            // 9
  					 2.0,  2.2,            // 10 
  					 2.2,  2.3,            // 11
  					 2.3,  2.4,            // 12
  					 2.4,  2.5 };          // 13

//// CRACKS
//const Int_t    nBinsEta              = 19;
//Double_t       leftEta  [nBinsEta]   = { 0.0,  0.02, 0.25, 0.42, 0.46, 0.77, 0.81, 0.91, 1.01, 1.13, 1.16,        etaCrackMin,    etaCrackMax,  1.653,  1.8, 2.0, 2.2, 2.3, 2.4 }; 
//Double_t       rightEta [nBinsEta]   = { 0.02, 0.25, 0.42, 0.46, 0.77, 0.81, 0.91, 1.01, 1.13, 1.16, etaCrackMin, etaCrackMax,    1.653,        1.8  ,  2.0, 2.2, 2.3, 2.4, 2.5 }; 
//const Double_t etabins  [nBinsEta*2] = { 0.00, 0.02,           // 0 bin0
//					 0.02, 0.25,           // 1
//  					 0.25, 0.42,           // 2
//					 0.42, 0.46,           // 3 crack 1
//  					 0.46, 0.77,           // 4
//					 0.77, 0.81,           // 5 crack 2
//  					 0.81, 0.91,           // 6
//  					 0.91, 1.01,           // 7
//  					 1.01, 1.13,           // 8
//					 1.13, 1.16,           // 9 crack 3
//  					 1.16, etaCrackMin,    // 10
//					 etaCrackMin, etaCrackMax,// 11 crack EB/EE
//  					 etaCrackMax, 1.653,   // 12
//  					 1.653, 1.8,           // 13
//  					 1.8,  2.0,            // 14
//  					 2.0,  2.2,            // 15 
//  					 2.2,  2.3,            // 16
//  					 2.3,  2.4,            // 17
//  					 2.4,  2.5 };          // 18

//EB only
// const Int_t    nBinsEta              = 5;
// Double_t       leftEta  [nBinsEta]   = { 0.02, 0.25, 0.46, 0.81, 0.91};
// Double_t       rightEta [nBinsEta]   = { 0.25, 0.42, 0.77, 0.91, 1.01};
// const Double_t etabins  [nBinsEta*2] = { 0.02, 0.25,           // 0
//  					 0.25, 0.42,           // 1
//  					 0.46, 0.77,           // 2
//  					 0.81, 0.91,           // 3
//  					 0.91, 1.01};          // 4


// EE only
// const Int_t    nBinsEta              = 7;
// Double_t       leftEta  [nBinsEta]   = { etaCrackMax,  1.653,  1.8, 2.0, 2.2, 2.3, 2.4 }; 
// Double_t       rightEta [nBinsEta]   = { 1.653,        1.8  ,  2.0, 2.2, 2.3, 2.4, 2.5 }; 
// const Double_t etabins  [nBinsEta*2] = { etaCrackMax, 1.653,   // 7
// 					 1.653, 1.8,           // 8
// 					 1.8,  2.0,            // 9
// 					 2.0,  2.2,            // 10 
// 					 2.2,  2.3,            // 11
// 					 2.3,  2.4,            // 12
// 					 2.4,  2.5 };          // 13


// const Int_t    nBinsEta              = 4; // EB modules
// Double_t       leftEta  [nBinsEta]   = {0.02, 0.46, 0.81, 1.16};
// Double_t       rightEta [nBinsEta]   = {0.42, 0.77, 1.13, 1.46};
// const Double_t etabins  [nBinsEta*2] = {0.02, 0.42, 0.46, 0.77, 0.81, 1.13, 1.16, 1.46};

//
// NO presampler
// const Int_t nBinsEta = 4;
// Double_t leftEta [nBinsEta]        = {1.653,  1.8, 2.0, 2.2 };
// Double_t rightEta[nBinsEta]        = {1.8 ,  2.0, 2.2, 2.5 };
// const Double_t etabins[nBinsEta*2] = {1.653, 1.8, 1.8, 2.0, 2.0, 2.2, 2.2,  2.5};

//3D
// const Int_t    nBinsEta              = 6;
// Double_t       leftEta  [nBinsEta]   = { 0.02,  0.46, 0.81, 1.16,           1.653,  2.2, }; 
// Double_t       rightEta [nBinsEta]   = { 0.42,  0.77, 1.13, etaCrackMin,    2.2,    2.5 }; 
// const Double_t etabins  [nBinsEta*2] = { 0.02,  0.42,           // 0
// 					 0.46,  0.77,           // 1
// 					 0.81,  1.13,           // 2
// 					 1.16,  etaCrackMin,    // 3
// 					 1.653, 2.2,            // 4 
// 					 2.2,   2.5 };          // 5

// ET binning --------------------------------------------------------------------------------
//

// STD 200
const Int_t    nBinsET             = 13;
Double_t       leftET  [nBinsET]   = {5.,  
  				      10., 20., 30., 40., 50., 60.,  80., 
  				      100., 120., 140., 160., 180. };
Double_t       rightET [nBinsET]   = {10., 20., 30., 40., 50., 60., 80., 
  				      100., 120., 140., 160., 180., 
  				      200.};
const Double_t ETBins  [nBinsET*2] = {5., 
  				      10., 10., 20., 20., 30., 30., 40., 40., 50., 50., 60., 60., 80., 80., 
  				      100., 100., 120., 120., 140., 140., 160., 160., 180., 180., 
  				      200.};

// STD 250
//const Int_t    nBinsET             = 14;
//Double_t       leftET  [nBinsET]   = {5.,  
//  				      10., 20., 30., 40., 50., 60.,  80., 
//  				      100., 120., 140., 160., 180., 200 };
//Double_t       rightET [nBinsET]   = {10., 20., 30., 40., 50., 60., 80., 
//  				      100., 120., 140., 160., 180., 
//  				      200., 250};
//const Double_t ETBins  [nBinsET*2] = {5., 
//  				      10., 10., 20., 20., 30., 30., 40., 40., 50., 50., 60., 60., 80., 80., 
//  				      100., 100., 120., 120., 140., 140., 160., 160., 180., 180., 
//  				      200.,200, 250};


// more bins
// const Int_t    nBinsET             = 18;
// Double_t       leftET  [nBinsET]   = {5.,  
//   				      10., 20., 30., 40., 50., 60.,  80., 
//   				      100., 120., 140., 160., 180., 200 ,210,220,230,240};
// Double_t       rightET [nBinsET]   = {10., 20., 30., 40., 50., 60., 80., 
//   				      100., 120., 140., 160., 180., 
//   				      200.,210, 220, 230,240, 250};
// const Double_t ETBins  [nBinsET*2] = {5., 
//   				      10., 10., 20., 20., 30., 30., 40., 40., 50., 50., 60., 60., 80., 80., 
//   				      100., 100., 120., 120., 140., 140., 160., 160., 180., 180., 
//   				      200.,200, 210,210,220, 220,230,230, 240, 240, 250};

// Finer grain 
// const Int_t    nBinsET             = 24; 
// Double_t       leftET  [nBinsET]   = {5.,
// 				      10., 15., 20., 25., 30., 35., 40., 45.,  50., 55., 60., 65., 70., 75., 80., 85., 90., 95.,
// 				      100., 120., 140., 160., 180.};
// Double_t       rightET [nBinsET]   = { 10., 15. ,20., 25., 30., 35., 40., 45.,  50., 55., 60., 65., 70., 75., 80., 85., 90., 95.,
// 				      100., 120., 140., 160., 180., 
// 				      200.};
// const Double_t ETBins  [nBinsET*2] = {5., 
// 				      10., 10., 15., 15., 20., 20., 25., 25., 30., 30., 35., 35., 40., 40., 45., 45., 
// 				      50., 50., 55., 55., 60., 60., 65., 65., 70., 70., 75., 75., 80., 80., 85., 85., 90., 90., 95., 95.,
// 				      100., 100., 120., 120., 140., 140., 160., 160., 180., 180., 
// 				      200.};

// 3D
// const Int_t    nBinsET             = 7;
// Double_t       leftET  [nBinsET]   = {5.,  
//  				      10., 20., 30., 50., 
//  				      100., 150.};
// Double_t       rightET [nBinsET]   = {10., 20., 30., 50.,
//  				      100., 150., 
//  				      200.};
// const Double_t ETBins  [nBinsET*2] = {5., 
//  				      10., 10., 20., 20., 30., 30., 50., 50., 
//  				      100., 100., 150., 150., 
//  				      200.};

// sigma_phi/sigma_eta binning ---------------------------------------------------------------
//

//STD
const Int_t    nBinsBr            = 18;
Double_t       leftBr  [nBinsBr]  = {0.8,
				     1.0, 1.2, 1.4, 1.6, 1.8,
				     2.0, 2.2, 2.4, 2.6, 2.8,
				     3.0, 3.2, 3.4, 3.6, 3.8,
				     4.0, 5.0 };
Double_t       rightBr [nBinsBr]  = {1.0, 1.2, 1.4, 1.6, 1.8,
				     2.0, 2.2, 2.4, 2.6, 2.8,
				     3.0, 3.2, 3.4, 3.6, 3.8,
				     4.0, 5.0, 
				     10.0};
const Double_t brbins  [nBinsBr*2]= {0.8,
				     1.0, 1.0, 1.2, 1.2, 1.4, 1.4, 1.6, 1.6, 1.8, 1.8,
				     2.0, 2.0, 2.2, 2.2, 2.4, 2.4, 2.6, 2.6, 2.8, 2.8,
				     3.0, 3.0, 3.2, 3.2, 3.4, 3.4, 3.6, 3.6, 3.8, 3.8,
				     4.0, 4.0, 5.0, 5.0, 10.0};


// const Int_t    nBinsBr            = 24;
// Double_t       leftBr  [nBinsBr]  = {0.8,
// 				     1.0, 1.2, 1.4, 1.6, 1.8,
// 				     2.0, 2.2, 2.4, 2.6, 2.8,
// 				     3.0, 3.2, 3.4, 3.6, 3.8,
// 				     4.0, 4.2, 4.4, 4.6, 4.8,
// 				     5.0, 6.0, 7.0};
// Double_t       rightBr [nBinsBr]  = {1.0, 1.2, 1.4, 1.6, 1.8,
// 				     2.0, 2.2, 2.4, 2.6, 2.8,
// 				     3.0, 3.2, 3.4, 3.6, 3.8,
// 				     4.0, 4.2, 4.4, 4.6, 4.8,
// 				     5.0, 6.0, 7.0,
// 				     10.0};
// const Double_t brbins  [nBinsBr*2]= {0.8,
// 				     1.0, 1.0, 1.2, 1.2, 1.4, 1.4, 1.6, 1.6, 1.8, 1.8,
// 				     2.0, 2.0, 2.2, 2.2, 2.4, 2.4, 2.6, 2.6, 2.8, 2.8,
// 				     3.0, 3.0, 3.2, 3.2, 3.4, 3.4, 3.6, 3.6, 3.8, 3.8,
// 				     4.0, 4.0, 4.2, 4.2, 4.4, 4.4, 4.6, 4.6, 4.8, 4.8,
// 				     5.0, 5.0, 6.0, 6.0, 7.0, 7.0, 10.0};
//

// const Int_t    nBinsBr            = 10;
// Double_t       leftBr  [nBinsBr]  = {0.8,
// 				     1.0, 1.2, 1.4, 1.6, 1.8,
// 				     2.0, 
// 				     3.0, 
// 				     4.0, 5.0 };
// Double_t       rightBr [nBinsBr]  = {1.0, 1.2, 1.4, 1.6, 1.8,
// 				     2.0, 
// 				     3.0, 
// 				     4.0, 5.0, 
// 				     10.0};
// const Double_t brbins  [nBinsBr*2]= {0.8,
// 				     1.0, 1.0, 1.2, 1.2, 1.4, 1.4, 1.6, 1.6, 1.8, 1.8,
// 				     2.0, 2.0,
// 				     3.0, 3.0,
// 				     4.0, 4.0, 5.0, 5.0, 10.0};


// R9 binning ---------------------------------------------------------------
//
// const Int_t    nBinsR9            = 24;
// Double_t       leftR9  [nBinsR9]  = {0.0, 0.2, 0.4, 0.5, 0.55, 0.6, 0.65, 0.7, 0.75, 0.8,0.81,0.82,0.83,0.84,0.85,0.86,0.87,0.88,0.89,0.9,0.91,0.92,0.93,0.94 };
// Double_t       rightR9 [nBinsR9]  = {     0.2, 0.4, 0.5, 0.55, 0.6, 0.65, 0.7, 0.75, 0.8,0.81,0.82,0.83,0.84,0.85,0.86,0.87,0.88,0.89,0.9,0.91,0.92,0.93,0.94,0.95 };
// const Double_t R9bins  [nBinsR9*2]= {0.0, 0.2, 0.2, 0.4, 0.4, 0.5, 0.5, 0.55, 0.55, 
// 				     0.6, 0.6, 0.65, 0.65, 0.7, 0.7, 0.75, 0.75, 
// 				     0.8,  0.8,  0.81, 0.81, 0.82, 0.82, 0.83, 0.83,
// 				     0.84, 0.84, 0.85, 0.85, 0.86, 0.86, 0.87, 0.87,
// 				     0.88, 0.88, 0.89, 0.89, 0.9,  0.9,  0.91, 0.91,
// 				     0.92, 0.92, 0.93, 0.93, 0.94, 0.94, 0.95 };

const Int_t    nBinsR9            = 14;
Double_t       leftR9  [nBinsR9]  = {0.0, 0.2, 0.4, 0.5,  0.6, 0.7, 0.8,0.82,0.84,0.86,0.88,0.9,0.92,0.94 };
Double_t       rightR9 [nBinsR9]  = {     0.2, 0.4, 0.5,  0.6, 0.7, 0.8,0.82,0.84,0.86,0.88,0.9,0.92,0.94,0.95 };
const Double_t R9bins  [nBinsR9*2]= {0.0, 0.2, 0.2, 0.4, 0.4, 0.5, 0.5, 0.6, 0.6, 0.7, 0.7,
				     0.8,  0.8, 0.82, 0.82,0.84, 0.84, 0.86, 0.86, 0.88, 0.88, 0.9, 0.9, 0.92, 0.92, 0.94, 0.94, 0.95 };

// E binning --------------------------------------------------------------------------------
//

// const Int_t    nBinsE             = 30;
// Double_t       leftE  [nBinsE]   = {  0., 10, 20,30,40,50,60,  75., 100., 125., 150., 175., 200., 225., 250., 275., 300., 325., 350., 375., 400., 425., 450., 475., 500., 600, 700, 800, 900, 1000. };
// Double_t       rightE [nBinsE]   = {       10,20,30,40,50,60,  75., 100., 125., 150., 175., 200., 225., 250., 275., 300., 325., 350., 375., 400., 425., 450., 475., 500., 600, 700, 800, 900, 1000, 2000. };

// Double_t       EBins [nBinsE*2]   = { 0,10,10,20,20,30,30,40,40,50,50,60,60,75,75,
// 				       100., 100., 125., 125., 150., 150., 175., 175., 
// 				       200., 200., 225., 225., 250., 250., 275., 275.,
// 				       300., 300., 325., 325., 350., 350., 375., 375.,
// 				       400., 400., 425., 425., 450., 450., 475., 475.,
// 				       500., 500., 600., 600., 700., 700., 800., 800., 900., 900., 1000., 1000., 2000.};


const Int_t    nBinsE             = 26;
Double_t       leftE  [nBinsE]   = {  0.,    25.,  50.,  75., 100., 125., 150., 175., 200., 225., 250., 275., 300., 325., 350., 375., 400., 425., 450., 475., 500., 600, 700, 800, 900, 1000. };
Double_t       rightE [nBinsE]   = {         25.,  50.,  75., 100., 125., 150., 175., 200., 225., 250., 275., 300., 325., 350., 375., 400., 425., 450., 475., 500., 600, 700, 800, 900, 1000, 2000. };

Double_t       EBins [nBinsE*2]   = {  0.,    25.,25.,   50.,50.,  75.,75., 			 
				       100., 100., 125., 125., 150., 150., 175., 175., 
				       200., 200., 225., 225., 250., 250., 275., 275.,
				       300., 300., 325., 325., 350., 350., 375., 375.,
				       400., 400., 425., 425., 450., 450., 475., 475.,
				       500., 500., 600., 600., 700., 700., 800., 800., 900., 900., 1000., 1000., 2000.};
